[["simple behaviours"
  [[pprint {:display-as "a formatted string"
            :example    {:key1 "value1", :key2, "value2"}}]
   [hidden {:display-as "do not display"
            :example    ["SECRET"]}]]]

 ["web dev"
  [[html {:display-as "HTML"
          :example "<div><h3>Hello ><em>World</em></h3><div>"}]
   [hiccup {:display-as "HTML"
            :example    [:div [:h3 "Hello " [:em "World"]]]}]
   [reagent {:display-as "A reagent component inside HTML"
             :example    [(fn [] [:button {:on-click (fn [ev] (js/alert "You pressed it"))}
                                  "Press me"])]}]
   [scittle {:display-as "Code to go into a <script type=\"application/x-scittle\">"
             :example    (println "hello world")}]
   [emmy-viewers {:display-as "A reagent component corresponding to emmy-viewers"}]]]

 ["data visualization formats"
  [[md {:display-as            "a Markdown string"
        :example               "## Hello *World*"}]
   [tex {:display-as "a TeX formula"
         :example "x^2"}]
   [code {:display-as          "a piece syntax highlighted Clojure code"
          :example             "(+ 1 2)"}]
   [edn {:display-as           "a piece syntax highlighted EDN structure"
         :example              "{:x [1 2 3]}"}]
   [vega {:display-as          "a chart"
          :example             {:description "A basic bar chart example, with value labels shown upon pointer hover.",
                                :axes        [{:orient "bottom", :scale "xscale"}
                                              {:orient "left", :scale "yscale"}],
                                :width       400,
                                :scales      [{:name    "xscale",
                                               :type    "band",
                                               :domain  {:data "table", :field "category"},
                                               :range   "width",
                                               :padding 0.05,
                                               :round   true}
                                              {:name   "yscale",
                                               :domain {:data "table", :field "amount"},
                                               :nice   true,
                                               :range  "height"}],
                                :padding     5,
                                :marks       [{:type "rect",
                                               :from {:data "table"},
                                               :encode
                                               {:enter
                                                {:x     {:scale "xscale", :field "category"},
                                                 :width {:scale "xscale", :band 1},
                                                 :y     {:scale "yscale", :field "amount"},
                                                 :y2    {:scale "yscale", :value 0}},
                                                :update {:fill {:value "steelblue"}},
                                                :hover  {:fill {:value "red"}}}}
                                              {:type "text",
                                               :encode
                                               {:enter
                                                {:align    {:value "center"},
                                                 :baseline {:value "bottom"},
                                                 :fill     {:value "#333"}},
                                                :update
                                                {:x    {:scale "xscale", :signal "tooltip.category", :band 0.5},
                                                 :y    {:scale "yscale", :signal "tooltip.amount", :offset -2},
                                                 :text {:signal "tooltip.amount"},
                                                 :fillOpacity
                                                 [{:test "datum === tooltip", :value 0} {:value 1}]}}}],
                                :signals     [{:name  "tooltip",
                                               :value {},
                                               :on
                                               [{:events "rect:pointerover", :update "datum"}
                                                {:events "rect:pointerout", :update "{}"}]}],
                                :height      200,
                                :data        [{:name "table",
                                               :values
                                               [{:category "A", :amount 28}
                                                {:category "B", :amount 55}
                                                {:category "C", :amount 43}
                                                {:category "D", :amount 91}
                                                {:category "E", :amount 81}
                                                {:category "F", :amount 53}
                                                {:category "G", :amount 19}
                                                {:category "H", :amount 87}]}]}
          :docs        "https://vega.github.io/vega/docs/"
          :json-schema "https://vega.github.io/schema/vega/v5.json"}]
   [vega-lite {:display-as  "VegaLite chart"
               :example     {:description "A simple bar chart with embedded data."
                             :data        {:values [{"a" "A", "b" 28},
                                                    {"a" "B", "b" 55},
                                                    {"a" "C", "b" 43},
                                                    {"a" "D", "b" 91},
                                                    {"a" "E", "b" 81},
                                                    {"a" "F", "b" 53},
                                                    {"a" "G", "b" 19},
                                                    {"a" "H", "b" 87},
                                                    {"a" "I", "b" 52}]},
                             :mark        "bar",
                             :encoding    {"x" {"field" "a", "type" "nominal", "axis" {"labelAngle" 0}},
                                           "y" {"field" "b", "type" "quantitative"}}}
               :docs        "https://vega.github.io/vega-lite/docs/"
               :json-schema "https://vega.github.io/schema/vega-lite/v5.json"}]
   [echarts {:display-as "a chart"
             :example    [["a" "b" "c" "d"]
                          [1 2 3 4]]
             :docs       "https://echarts.apache.org/en/option.html"}]
   [cytoscape {:display-as  "a graph"
               :example     {:nodes #{1 2 3 4 5}
                             :edges #{[1 2] [3 5] [4 2] [4 3]}}
               :docs        "https://js.cytoscape.org/#notation/elements-json"
               :json-schema "https://raw.githubusercontent.com/AZaitzeff/cytoscape_js_schema/main/cytoscape_schema.json"}]
   [plotly {:display-as "a plot"
            :example [{:x [1, 2, 3, 4, 5],
                       :y [1, 2, 4, 8, 16]}]
            :docs "https://plotly.com/javascript/getting-started/"
            :json-schema "https://plotly.com/chart-studio-help/json-chart-schema/"}]
   [htmlwidgets-plotly {:display-as "a plot rendered by the JS client side of Plotly R"
                        :docs "https://plotly.com/r/"}]
   [htmlwidgets-ggplotly {:display-as "a plot rendered by the JS client side of Plotly R, specifically for a ggplotly plot"
                          :docs "https://plotly.com/ggplot2/"}]
   [video {:display-as "an embedded video"
           :examples [{:youtube-id "MXHI4mgfVk8"}
                      "\"file:///path/to/vid.mp4\""]}]
   [observable {:display-as "Observable visualizations"
                :docs "https://observablehq.com/"}]
   [highcharts {:display-as "a chart"
                :example {:title {:text "Line chart"}
                          :subtitle {:text "By Job Category"}
                          :yAxis {:title {:text "Number of Employees"}}
                          :series [{:name "Installation & Developers"
                                    :data [43934, 48656, 65165, 81827, 112143, 142383,
                                           171533, 165174, 155157, 161454, 154610]}

                                   {:name "Manufacturing",
                                    :data [24916, 37941, 29742, 29851, 32490, 30282,
                                           38121, 36885, 33726, 34243, 31050]}

                                   {:name "Sales & Distribution",
                                    :data [11744, 30000, 16005, 19771, 20185, 24377,
                                           32147, 30912, 29243, 29213, 25663]}

                                   {:name "Operations & Maintenance",
                                    :data [nil, nil, nil, nil, nil, nil, nil,
                                           nil, 11164, 11218, 10077]}

                                   {:name "Other",
                                    :data [21908, 5548, 8105, 11248, 8989, 11816, 18274,
                                           17300, 13053, 11906, 10073]}]

                          :xAxis {:accessibility {:rangeDescription "Range: 2010 to 2020"}}

                          :legend {:layout "vertical",
                                   :align "right",
                                   :verticalAlign "middle"}

                          :plotOptions {:series {:label {:connectorAllowed false},
                                                 :pointStart 2010}}

                          :responsive {:rules [{:condition {:maxWidth 500},
                                                :chartOptions {:legend {:layout "horizontal",
                                                                        :align "center",
                                                                        :verticalAlign "bottom"}}}]}}
                :docs "https://www.highcharts.com/docs/index"
                :json-schema ""}]]]

 ["specific types"
  [[image {:display-as "an image"
           :example    "At the moment, java BufferedImage objects are supported."}]
   [dataset {:display-as "a table"
             :example    (->> (System/getProperties)
                              (map (fn [[k v]] {:k k :v (apply str (take 40 (str v)))}))
                              (tech.v3.dataset/->>dataset {:dataset-name "My Truncated System Properties"}))
             :docs       "https://github.com/techascent/tech.ml.dataset"}]
   [smile-model {:display-as "the `str` value should be displayesd as code"
                 :docs "https://haifengl.github.io/"}]]]

 ["clojure specific"
  [[var {:display-as "the name of a var"
         :example    (def testvar 100)}]
   [test {:display-as "success or failure"
          :example    (deftest unity-test (is (= 1 1)))}]]]

 ["plain structures"
  [[seq {:display-as "a sequence"
         :example    (range 5)}]
   [vector {:display-as "a sequence"
            :example    (vec (range 5))}]
   [set {:display-as "a bag"
         :example    (set (range 5))}]
   [map {:display-as "associated values"
         :example    {:key1 "value1", :key2 "value2"}}]]]

 ["other recursive structures"
  [[table {:display-as "a table"
           :examples    [[{:col1 1 :col2 2} {:col1 3 :col2 4}]
                         {:col1 [1 3] :col2 [2 4]}
                         {:column-names [:col1 :col2] 
                          :row-vectors [[1 2] [3 4]]}]}]
   [portal {:display-as "portal"
            :example    {:key1 "value1",
                         :key2 ^{:kindly/kind :kind/hiccup} [:div [:h3 "Hello " [:em "World"]]]}}]]]

 ["meta kinds"
  [[fragment {:display-as "one toplevel context with a sequential value considered as many toplevel contexts of various kinds"
              :example [^:kind/md ["**hello**"]
                        ^:kind/hiccup [:p [:b "hello"]]]}]
   [fn {:display-as "the evaluation of the given function and arguments"
        :raw-docstring "examples: 
  ```clj
  ;; vector form
  (kind/fn [+ 2 3]) ; => 5
  (kind/fn [(fn [s] (kind/md s)) " **hi** "]) ; => bold hi
  ;; map form
  (kind/fn {:kindly/f (fn [{:keys [x y]}] (+ x y)) :x 1 :y 2}) ; => 3
  ;; arbitrary value + custom view fn
  (kind/fn [\"**hi**\"] {:kindly/f (fn [[txt]] (kind/md txt))) ; => bold hi
  ```
  "}]
   [test-last {:display-as "invisible (both code and value), but generates a test"
               :example ; check whether the last eval result is greater than 9
               [> 9]}]]]]
